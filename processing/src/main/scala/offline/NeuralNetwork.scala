package offline

import org.apache.spark.ml.classification.MultilayerPerceptronClassifier
import org.apache.spark.ml.feature.PCA
import org.apache.spark.sql.functions._
import org.apache.spark.sql.SparkSession

import br.ufrj.gta.stream.metrics._
import br.ufrj.gta.stream.schema.flow.Flowtbag
import br.ufrj.gta.stream.util.File

object NeuralNetwork {
    def main(args: Array[String]) {

        // Sets dataset file separation string ("," for csv) and label column name
        val sep = ","
        val labelCol = "label"

        // Sets names for colums created during the algorithm execution, containing PCA and regular features
        val pcaFeaturesCol = "pcaFeatures"
        var featuresCol = "features"

        // Defines dataset schema, dataset csv generated by flowtbag https://github.com/DanielArndt/flowtbag 
        val schema = Flowtbag.getSchema

        // Creates spark session
        val spark = SparkSession.builder.appName("Stream").getOrCreate()

        // Checks arguments
        if (args.length < 6) {
            println("Missing parameters")
            sys.exit(1)
        }

        // Path for dataset used from training and testing
        val inputFile = args(0)

        // Filename for saving classification results
        val metricsFilename = args(1)

        // Number of the algorithm is executed; used to obtain the Confidence Interval
        val numSims = args(2).toInt

        // Number of Cores used on each Slave; used to test the impact of parallelism
        val numCores = args(3).toInt

        // Sets algorithm hyperparameters
        val layers = args(4).split(',').map(l => l.toInt)
	    val maxIter = args(5).toInt

        // Sets total number of PCA features; optional
        val pcaK: Option[Int] = try {
            Some(args(6).toInt)
        } catch {
            case e: Exception => None
        }

        // Reads csv dataset file, fitting it to the schema
        val inputData = spark.read
            .option("sep", sep)
            .option("header", false)
            .schema(schema)
            .csv(inputFile)

        // Creates a single vector column containing all features
        val featurizedData = Flowtbag.featurize(inputData, featuresCol)

        // Defines all default metrics, and adds 3 extra ones
        val metrics = new PredictionMetrics(PredictionMetrics.names ++ Array("Number of cores", "Training time", "Test time"))

        for (i <- 0 until numSims) {

            // Splits the dataset on training (70%) and test (30%)
            val splitData = featurizedData.randomSplit(Array(0.7, 0.3))

            var startTime = System.currentTimeMillis()

            // Applies PCA to training and test data; optional
            val (trainingData, testData) = pcaK match {
                case Some(pcaK) => {
                    val pca = new PCA()
                        .setInputCol(featuresCol)
                        .setOutputCol(pcaFeaturesCol)
                        .setK(pcaK)
                        .fit(splitData(0))

                    featuresCol = pcaFeaturesCol

                    (pca.transform(splitData(0)), pca.transform(splitData(1)))
                }
                case None => (splitData(0), splitData(1))
            }

            // Creates a Multilayer Perceptron classifier, using the hyperparameters defined previously
            val classifier = new MultilayerPerceptronClassifier()
                .setFeaturesCol(featuresCol)
                .setLabelCol(labelCol)
                .setLayers(layers)
                .setMaxIter(maxIter)

            // Fits the training data to the classifier, creating the classification model
            val model = classifier.fit(trainingData)

            val trainingTime = (System.currentTimeMillis() - startTime) / 1000.0

            startTime = System.currentTimeMillis()

            // Tests model on the test data
            val prediction = model.transform(testData)

            // Creates a column with the classification prediction
            val predictionCol = classifier.getPredictionCol

            // Cache model to improve performance
            prediction.cache()

            // Perform an action to accurately measure the test time
            prediction.count()

            val testTime = (System.currentTimeMillis() - startTime) / 1000.0

            // Obtains metrics using the label and metrics columns
            metrics.add(metrics.getMetrics(prediction, labelCol, predictionCol) + ("Number of cores" -> numCores, "Training time" -> trainingTime, "Test time" -> testTime))

            // Removes movel from cache since the iteration is over
            prediction.unpersist()
        }

        // Saves metric results on a csv file
        metrics.export(metricsFilename, Metrics.FormatCsv)

        spark.stop()
    }
}
